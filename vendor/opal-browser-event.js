/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$lambda', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$include?', '$callback=', '$on!', '$delegate', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Native'));

      (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defs(self, '$new', TMP_1 = function() {
          var self = this, $iter = TMP_1.$$p, block = $iter || nil, data = nil;

          TMP_1.$$p = null;
          data = Opal.find_super_dispatcher(self, 'new', TMP_1, null, $Definition).apply(self, [{ bubbles: true, cancelable: true }]);
          if (block !== false && block !== nil) {
            block.$call(data)};
          return data.$to_n();
        });

        def['$bubbles='] = function(value) {
          var self = this;

          return self["native"].bubbles = value;
        };

        return (def['$cancelable='] = function(value) {
          var self = this;

          return self["native"].cancelable = value;
        }, nil) && 'cancelable=';
      })(self, null);

      return (function($base) {
        var self = $module($base, 'Target');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_8, TMP_11, $a, TMP_16, TMP_17;

        Opal.defs(self, '$converters', function() {
          var $a, self = this;
          if (self.converters == null) self.converters = nil;

          return ((($a = self.converters) !== false && $a !== nil) ? $a : self.converters = []);
        });

        Opal.defs(self, '$register', TMP_2 = function() {
          var self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return self.$converters()['$<<'](block);
        });

        Opal.defs(self, '$convert', function(value) {try {

          var $a, $b, TMP_3, self = this;

          if ((($a = self['$native?'](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return value
          };
          ($a = ($b = self.$converters()).$each, $a.$$p = (TMP_3 = function(block){var self = TMP_3.$$s || this, $a, result = nil;
if (block == null) block = nil;
          if ((($a = result = block.$call(value)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(result)
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        Opal.defs(self, '$included', function(klass) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, TMP_5;

          return (Opal.defs(self, '$target', TMP_5 = function() {
              var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

              TMP_5.$$p = null;
              return ($a = ($b = (($scope.get('Event')).$$scope.get('Target'))).$register, $a.$$p = block.$to_proc(), $a).call($b);
            }), nil) && 'target'}, TMP_4.$$s = self, TMP_4), $a).call($b);
        });

        (function($base, $super) {
          function $Callback(){};
          var self = $Callback = $klass($base, $super, 'Callback', $Callback);

          var def = self.$$proto, $scope = self.$$scope, TMP_6;

          def.proc = def.name = nil;
          self.$attr_reader("target", "name", "selector");

          def.$initialize = TMP_6 = function(target, name, selector) {
            var self = this, $iter = TMP_6.$$p, block = $iter || nil;

            if (selector == null) {
              selector = nil
            }
            TMP_6.$$p = null;
            self.target = target;
            self.name = name;
            self.selector = selector;
            return self.block = block;
          };

          def.$call = function(event) {
            var self = this;

            return self.$to_proc().$call(event);
          };

          def.$to_proc = function() {
            var $a, $b, $c, TMP_7, self = this;

            return ((($a = self.proc) !== false && $a !== nil) ? $a : self.proc = ($b = ($c = self).$lambda, $b.$$p = (TMP_7 = function(event){var self = TMP_7.$$s || this, $a;
              if (self.block == null) self.block = nil;
if (event == null) event = nil;
            
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          
              event = $scope.get('Event').$new(event, self);
              if ((($a = event['$stopped?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                ($a = self.block).$call.apply($a, [event].concat(event.$arguments()))
              };
              return event['$prevented?']()['$!']();}, TMP_7.$$s = self, TMP_7), $b).call($c));
          };

          def.$event = function() {
            var self = this;

            return $scope.get('Event').$class_for(self.name);
          };

          return (def.$off = function() {
            var self = this;

            return self.$target().$off(self);
          }, nil) && 'off';
        })(self, null);

        (function($base, $super) {
          function $Delegate(){};
          var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

          var def = self.$$proto, $scope = self.$$scope;

          def.target = def.name = def.pair = nil;
          def.$initialize = function(target, name, pair) {
            var self = this;

            self.target = target;
            self.name = name;
            return self.pair = pair;
          };

          return (def.$off = function() {
            var $a, self = this, delegate = nil;

            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ((($a = delegate.$last()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              delegate.$first().$off();
              return delegate.$delete(self.name);
              } else {
              return nil
            };
          }, nil) && 'off';
        })(self, null);

        Opal.cdecl($scope, 'Delegates', $scope.get('Struct').$new("callback", "handlers"));

        Opal.defn(self, '$on', TMP_8 = function(name, selector) {
          var $a, $b, $c, $d, TMP_9, $e, TMP_10, self = this, $iter = TMP_8.$$p, block = $iter || nil, delegate = nil, pair = nil, callback = nil;

          if (selector == null) {
            selector = nil
          }
          TMP_8.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          if (selector !== false && selector !== nil) {
            if ((($a = delegate = self.$delegated()['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return $scope.get('Delegate').$new(self, name, pair);
              } else {
              delegate = self.$delegated()['$[]='](name, $scope.get('Delegates').$new());
              if ((($a = ["blur", "focus"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                (($a = [($c = ($d = self)['$on!'], $c.$$p = (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_9.$$s = self, TMP_9), $c).call($d, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
                } else {
                (($a = [($c = ($e = self).$on, $c.$$p = (TMP_10 = function(e){var self = TMP_10.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_10.$$s = self, TMP_10), $c).call($e, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
              };
              pair = [selector, block];
              (($a = [[pair]]), $b = delegate, $b['$handlers='].apply($b, $a), $a[$a.length-1]);
              return $scope.get('Delegate').$new(self, name, pair);
            }
            } else {
            callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name, selector);
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        });

        Opal.defn(self, '$on!', TMP_11 = function(name) {
          var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil, callback = nil;

          TMP_11.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name);
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          });

          Opal.defn(self, '$attach!', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          });
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$==']($scope.get('Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          ;
              } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc());
            };
            return callback;
          });

          Opal.defn(self, '$attach!', function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            $case = callback.$name();if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc());}else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc());}else {self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          });
          } else {
          Opal.defn(self, '$attach', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          });

          Opal.defn(self, '$attach!', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          });
        };

        Opal.defn(self, '$off', function(what) {
          var $a, $b, TMP_12, $c, TMP_13, $d, TMP_14, self = this, $case = nil;

          if (what == null) {
            what = nil
          }
          return (function() {$case = what;if ($scope.get('Callback')['$===']($case)) {self.$callbacks().$delete(what);
          return self.$detach(what);}else if ($scope.get('String')['$===']($case)) {if ((($a = ((($b = what['$include?']("*")) !== false && $b !== nil) ? $b : what['$include?']("?"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$off($scope.get('Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
            } else {
            what = $scope.get('Event').$name_for(what);
            return ($a = ($b = self.$callbacks()).$delete_if, $a.$$p = (TMP_12 = function(callback){var self = TMP_12.$$s || this;
if (callback == null) callback = nil;
            if (callback.$name()['$=='](what)) {
                self.$detach(callback);
                return true;
                } else {
                return nil
              }}, TMP_12.$$s = self, TMP_12), $a).call($b);
          }}else if ($scope.get('Regexp')['$===']($case)) {return ($a = ($c = self.$callbacks()).$delete_if, $a.$$p = (TMP_13 = function(callback){var self = TMP_13.$$s || this, $a;
if (callback == null) callback = nil;
          if ((($a = callback.$name()['$=~'](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$detach(callback);
              return true;
              } else {
              return nil
            }}, TMP_13.$$s = self, TMP_13), $a).call($c)}else {($a = ($d = self.$callbacks()).$each, $a.$$p = (TMP_14 = function(callback){var self = TMP_14.$$s || this;
if (callback == null) callback = nil;
          return self.$detach(callback)}, TMP_14.$$s = self, TMP_14), $a).call($d);
          return self.$callbacks().$clear();}})();
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.removeListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.detach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', function(callback) {
            var $a, $b, $c, TMP_15, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              if ((($a = ($b = ($c = self.$callbacks())['$none?'], $b.$$p = (TMP_15 = function(c){var self = TMP_15.$$s || this;
if (c == null) c = nil;
              return c.$event()['$==']($scope.get('Custom'))}, TMP_15.$$s = self, TMP_15), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            ;
                } else {
                return nil
              }
              } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc());
            };
          })
          } else {
          Opal.defn(self, '$detach', function(callback) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          })
        };

        Opal.defn(self, '$trigger', TMP_16 = function(event, args) {
          var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_16.$$p = null;
          if ((($a = event['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            event = ($a = ($b = $scope.get('Event')).$create, $a.$$p = block.$to_proc(), $a).apply($b, [event].concat(args))};
          return self.$dispatch(event);
        });

        Opal.defn(self, '$trigger!', TMP_17 = function(event, args) {
          var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_17.$$p = null;
          return ($a = ($b = self).$trigger, $a.$$p = (TMP_18 = function(e){var self = TMP_18.$$s || this, $a, $b;
if (e == null) e = nil;
          if (block !== false && block !== nil) {
              block.$call(e)};
            return (($a = [false]), $b = e, $b['$bubbles='].apply($b, $a), $a[$a.length-1]);}, TMP_18.$$s = self, TMP_18), $a).apply($b, [event].concat(args));
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.dispatch")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', function(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n());
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.fire")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', function(event) {
            var $a, self = this;
            if (self["native"] == null) self["native"] = nil;

            if ((($a = $scope.get('Custom')['$==='](event)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n());
              } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n());
            };
          })
          } else {
          Opal.defn(self, '$dispatch', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          })
        };

        self.$private();

        Opal.defn(self, '$callbacks', function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      ;
        });

        Opal.defn(self, '$delegated', function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      ;
        });

        Opal.defn(self, '$delegate', function(delegates, event, element) {
          var $a, $b, TMP_19, self = this;

          if (element == null) {
            element = event.$target()
          }
          if ((($a = ((($b = element['$nil?']()) !== false && $b !== nil) ? $b : element['$=='](event.$on()))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = delegates.$handlers()).$each, $a.$$p = (TMP_19 = function(selector, block){var self = TMP_19.$$s || this, $a, $b, new$ = nil;
if (selector == null) selector = nil;if (block == null) block = nil;
          if ((($a = element['$=~'](selector)) !== nil && (!$a.$$is_boolean || $a == true))) {
              new$ = event.$dup();
              (($a = [element]), $b = new$, $b['$on='].apply($b, $a), $a[$a.length-1]);
              return ($a = block).$call.apply($a, [new$].concat(new$.$arguments()));
              } else {
              return nil
            }}, TMP_19.$$s = self, TMP_19), $a).call($b);
          return self.$delegate(delegates, event, element.$parent());
        });
      })(self);
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/ui"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $UI(){};
        var self = $UI = $klass($base, $super, 'UI', $UI);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.UI");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$detail='] = function(value) {
            var self = this;

            return self["native"].detail = value;
          };

          return (def['$view='] = function(value) {
            var self = this;

            return self["native"].view = value;
          }, nil) && 'view=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new UIEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            })}};

        self.$alias_native("detail");

        return self.$alias_native("view");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/mouse"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']();
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].clientX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].clientY = value;
            }, nil) && 'y=';
          })(self, null);

          (function($base, $super) {
            function $Layer(){};
            var self = $Layer = $klass($base, $super, 'Layer', $Layer);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].layerX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].layerY = value;
            }, nil) && 'y=';
          })(self, null);

          (function($base, $super) {
            function $Offset(){};
            var self = $Offset = $klass($base, $super, 'Offset', $Offset);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].offsetX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].offsetY= value;
            }, nil) && 'y=';
          })(self, null);

          (function($base, $super) {
            function $Page(){};
            var self = $Page = $klass($base, $super, 'Page', $Page);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].pageX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].pageY = value;
            }, nil) && 'y=';
          })(self, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].screenX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].screenY = value;
            }, nil) && 'y=';
          })(self, null);

          (function($base, $super) {
            function $Ancestor(){};
            var self = $Ancestor = $klass($base, $super, 'Ancestor', $Ancestor);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].x = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].y = value;
            }, nil) && 'y=';
          })(self, null);

          def['$x='] = function(value) {
            var self = this;

            return self["native"].screenX = value;
          };

          def['$y='] = function(value) {
            var self = this;

            return self["native"].screenY = value;
          };

          def['$alt!'] = function() {
            var self = this;

            return self["native"].altKey = true;
          };

          def['$ctrl!'] = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          };

          def['$meta!'] = function() {
            var self = this;

            return self["native"].metaKey = true;
          };

          def['$button='] = function(value) {
            var self = this;

            return self["native"].button = value;
          };

          def.$client = function() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          };

          def.$layer = function() {
            var self = this;

            return $scope.get('Layer').$new(self["native"]);
          };

          def.$offset = function() {
            var self = this;

            return $scope.get('Offset').$new(self["native"]);
          };

          def.$page = function() {
            var self = this;

            return $scope.get('Page').$new(self["native"]);
          };

          def.$screen = function() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          };

          def.$ancestor = function() {
            var self = this;

            return $scope.get('Ancestor').$new(self["native"]);
          };

          def['$related='] = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$try_convert(elem);
          };

          def['$from='] = function(elem) {
            var self = this;

            return self["native"].fromElement = $scope.get('Native').$try_convert(elem);
          };

          return (def['$to='] = function(elem) {
            var self = this;

            return self["native"].toElement = $scope.get('Native').$try_convert(elem);
          }, nil) && 'to=';
        })(self, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new MouseEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        def.$client = function() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        };

        def.$layer = function() {
          var $a, self = this;

          if ((($a = self["native"].layerX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].layerX, self["native"].layerY)
          };
        };

        def.$offset = function() {
          var $a, self = this;

          if ((($a = self["native"].offsetX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].offsetX, self["native"].offsetY)
          };
        };

        def.$page = function() {
          var $a, self = this;

          if ((($a = self["native"].pageX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].pageX, self["native"].pageY)
          };
        };

        def.$screen = function() {
          var $a, self = this;

          if ((($a = self["native"].screenX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
          };
        };

        def.$ancestor = function() {
          var $a, self = this;

          if ((($a = self["native"].x == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].x, self["native"].y)
          };
        };

        def.$x = function() {
          var self = this;

          return self.$screen().$x();
        };

        def.$y = function() {
          var self = this;

          return self.$screen().$y();
        };

        def.$related = function() {
          var $a, self = this;

          if ((($a = self["native"].relatedTarget == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].relatedTarget)
          };
        };

        def.$from = function() {
          var $a, self = this;

          if ((($a = self["native"].fromElement == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].fromElement)
          };
        };

        def.$to = function() {
          var $a, self = this;

          if ((($a = self["native"].toElement == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].toElement)
          };
        };

        def['$click?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("click");
        };

        def['$double_click?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick");
        };

        def['$down?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown");
        };

        def['$enter?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter");
        };

        def['$leave?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave");
        };

        def['$move?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove");
        };

        def['$out?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout");
        };

        def['$over?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover");
        };

        def['$up?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup");
        };

        return (def['$show?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("show");
        }, nil) && 'show?';
      })(self, $scope.get('UI'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/keyboard"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Keyboard");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$alt!'] = function() {
            var self = this;

            return self["native"].altKey = true;
          };

          def['$ctrl!'] = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          };

          def['$meta!'] = function() {
            var self = this;

            return self["native"].metaKey = true;
          };

          def['$shift!'] = function() {
            var self = this;

            return self["native"].shiftKey = true;
          };

          def['$code='] = function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code;
          };

          def['$key='] = function(key) {
            var self = this;

            return self["native"].key = key;
          };

          def['$char='] = function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$;
          };

          def['$repeat!'] = function() {
            var self = this;

            return self["native"].repeat = true;
          };

          return (def['$locale='] = function(value) {
            var self = this;

            return self["native"].locale = value;
          }, nil) && 'locale=';
        })(self, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("locale");

        self.$alias_native("repeat?", "repeat");

        def.$key = function() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil;
        };

        def.$code = function() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil;
        };

        def.$char = function() {
          var $a, self = this;

          return self["native"].char || self["native"].charCode || (function() {if ((($a = self.$code()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$code().$chr()
            } else {
            return nil
          }; return nil; })();
        };

        Opal.defn(self, '$to_i', def.$key);

        def['$down?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown");
        };

        def['$press?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress");
        };

        return (def['$up?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup");
        }, nil) && 'up?';
      })(self, $scope.get('UI'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/focus"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Focus(){};
        var self = $Focus = $klass($base, $super, 'Focus', $Focus);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Focus");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$view='] = function(value) {
            var self = this;

            return self["native"].view = $scope.get('Native').$convert(value);
          };

          return (def['$related='] = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          }, nil) && 'related=';
        })(self, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new FocusEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            })}};

        return (def.$related = function() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        }, nil) && 'related';
      })(self, $scope.get('UI'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/wheel"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Wheel(){};
        var self = $Wheel = $klass($base, $super, 'Wheel', $Wheel);

        var def = self.$$proto, $scope = self.$$scope;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']();
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$x='] = function(value) {
            var self = this;

            return self["native"].deltaX = value;
          };

          def['$y='] = function(value) {
            var self = this;

            return self["native"].deltaY = value;
          };

          def['$z='] = function(value) {
            var self = this;

            return self["native"].deltaZ = value;
          };

          return (def['$mode='] = function(value) {
            var self = this, $case = nil;

            value = (function() {$case = value;if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL;}else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE;}else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE;}else { return nil }})();
            return self["native"].deltaMode = value;
          }, nil) && 'mode=';
        })(self, $scope.get('Definition'));

        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return new WheelEvent(name, desc);
        });

        self.$alias_native("x", "deltaX");

        self.$alias_native("y", "deltaY");

        self.$alias_native("z", "deltaZ");

        return (def.$mode = function() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}else { return nil }})();
        }, nil) && 'mode';
      })(self, $scope.get('UI'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/composition"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Composition(){};
        var self = $Composition = $klass($base, $super, 'Composition', $Composition);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Composition");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$data='] = function(value) {
            var self = this;

            return self["native"].data = value;
          };

          return (def['$locale='] = function(value) {
            var self = this;

            return self["native"].locale = value;
          }, nil) && 'locale=';
        })(self, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            })}};

        self.$alias_native("data");

        self.$alias_native("locale");

        def['$start?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart");
        };

        def['$update?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate");
        };

        return (def['$end?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend");
        }, nil) && 'end?';
      })(self, $scope.get('UI'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/animation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Animation");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$animation='] = function(value) {
            var self = this;

            return self["native"].animationName = value;
          };

          return (def['$elapsed='] = function(value) {
            var self = this;

            return self["native"].elapsedTime = value;
          }, nil) && 'elapsed=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            })}};

        self.$alias_native("name", "animationName");

        return self.$alias_native("elapsed", "elapsedTime");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/audio_processing"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $AudioProcessing(){};
        var self = $AudioProcessing = $klass($base, $super, 'AudioProcessing', $AudioProcessing);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.AudioProcessing");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$time='] = function(value) {
            var self = this;

            return self["native"].playbackTime = value;
          };

          def['$input='] = function(value) {
            var self = this;

            return self["native"].inputBuffer = value;
          };

          return (def['$output='] = function(value) {
            var self = this;

            return self["native"].outputBuffer = value;
          }, nil) && 'output=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc);
            })}};

        self.$alias_native("time", "playbackTime");

        self.$alias_native("input", "inputBuffer");

        return self.$alias_native("output", "outputBuffer");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/before_unload"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $BeforeUnload(){};
        var self = $BeforeUnload = $klass($base, $super, 'BeforeUnload', $BeforeUnload);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.BeforeUnload");
        });

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc);
            }), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/clipboard"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Clipboard(){};
        var self = $Clipboard = $klass($base, $super, 'Clipboard', $Clipboard);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Clipboard");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$data='] = function(value) {
            var self = this;

            return self["native"].data = value;
          };

          return (def['$type='] = function(value) {
            var self = this;

            return self["native"].dataType = value;
          }, nil) && 'type=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc);
            })}};

        self.$alias_native("data");

        return self.$alias_native("type", "dataType");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/device_light"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceLight(){};
        var self = $DeviceLight = $klass($base, $super, 'DeviceLight', $DeviceLight);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceLight");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (def['$value='] = function(value) {
            var self = this;

            return self["native"].value = value;
          }, nil) && 'value='
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc);
            })}};

        return self.$alias_native("value");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/device_motion"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceMotion(){};
        var self = $DeviceMotion = $klass($base, $super, 'DeviceMotion', $DeviceMotion);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceMotion");
        });

        Opal.cdecl($scope, 'Acceleration', $scope.get('Struct').$new("x", "y", "z"));

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$acceleration='] = function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n();
          };

          def['$acceleration_with_gravity='] = function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n();
          };

          def['$rotation='] = function(value) {
            var self = this;

            return self["native"].rotationRate = value;
          };

          return (def['$interval='] = function(value) {
            var self = this;

            return self["native"].interval = value;
          }, nil) && 'interval=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            })}};

        self.$alias_native("acceleration");

        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");

        self.$alias_native("rotation", "rotationRate");

        return self.$alias_native("interval");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/device_orientation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceOrientation(){};
        var self = $DeviceOrientation = $klass($base, $super, 'DeviceOrientation', $DeviceOrientation);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceOrientation");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$absolute='] = function(value) {
            var self = this;

            return self["native"].absolute = value;
          };

          def['$alpha='] = function(value) {
            var self = this;

            return self["native"].alpha = value;
          };

          def['$beta='] = function(value) {
            var self = this;

            return self["native"].beta = value;
          };

          return (def['$gamma='] = function(value) {
            var self = this;

            return self["native"].gamma = value;
          }, nil) && 'gamma=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            })}};

        self.$alias_native("absolute");

        self.$alias_native("alpha");

        self.$alias_native("beta");

        return self.$alias_native("gamma");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/device_proximity"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceProximity(){};
        var self = $DeviceProximity = $klass($base, $super, 'DeviceProximity', $DeviceProximity);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceProximity");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$value='] = function(value) {
            var self = this;

            return self["native"].value = value;
          };

          def['$min='] = function(value) {
            var self = this;

            return self["native"].min = value;
          };

          return (def['$max='] = function(value) {
            var self = this;

            return self["native"].max = value;
          }, nil) && 'max=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc);
            })}};

        self.$alias_native("value");

        self.$alias_native("min");

        return self.$alias_native("max");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/drag"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$elem', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Drag(){};
        var self = $Drag = $klass($base, $super, 'Drag', $Drag);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Drag");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].clientX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].clientY = value;
            }, nil) && 'y=';
          })(self, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            def['$x='] = function(value) {
              var self = this;

              return self["native"].screenX = value;
            };

            return (def['$y='] = function(value) {
              var self = this;

              return self["native"].screenY = value;
            }, nil) && 'y=';
          })(self, null);

          def['$alt!'] = function() {
            var self = this;

            return self["native"].altKey = true;
          };

          def['$ctrl!'] = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          };

          def['$meta!'] = function() {
            var self = this;

            return self["native"].metaKey = true;
          };

          def['$button='] = function(value) {
            var self = this;

            return self["native"].button = value;
          };

          def.$client = function() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          };

          def.$screen = function() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          };

          def['$related='] = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          };

          return (def['$transfer='] = function(value) {
            var self = this;

            return self["native"].dataTransfer = $scope.get('Native').$convert(self.$elem());
          }, nil) && 'transfer=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DragEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        def.$client = function() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        };

        def.$screen = function() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].screenX) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
            } else {
            return nil
          };
        };

        def.$x = function() {
          var self = this;

          return self.$screen().$x();
        };

        def.$y = function() {
          var self = this;

          return self.$screen().$y();
        };

        def.$related = function() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        };

        return (def.$transfer = function() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, nil) && 'transfer';
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/gamepad"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Gamepad(){};
        var self = $Gamepad = $klass($base, $super, 'Gamepad', $Gamepad);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Gamepad");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$id='] = function(value) {
            var self = this;

            return self["native"].id = value;
          };

          def['$index='] = function(value) {
            var self = this;

            return self["native"].index = value;
          };

          def['$at='] = function(value) {
            var self = this;

            return self["native"].timestamp = value;
          };

          def['$axes='] = function(value) {
            var self = this;

            return self["native"].axes = value;
          };

          return (def['$buttons='] = function(value) {
            var self = this;

            return self["native"].buttons = value;
          }, nil) && 'buttons=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc });
            })}};

        def.$id = function() {
          var self = this;

          return self["native"].gamepad.id;
        };

        def.$index = function() {
          var self = this;

          return self["native"].gamepad.index;
        };

        def.$at = function() {
          var self = this;

          return self["native"].gamepad.timestamp;
        };

        def.$axes = function() {
          var self = this;

          return self["native"].gamepad.axes;
        };

        return (def.$buttons = function() {
          var self = this;

          return self["native"].gamepad.buttons;
        }, nil) && 'buttons';
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/hash_change"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $HashChange(){};
        var self = $HashChange = $klass($base, $super, 'HashChange', $HashChange);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.HashChange");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$old='] = function(value) {
            var self = this;

            return self["native"].oldURL = value;
          };

          return (def['$new='] = function(value) {
            var self = this;

            return self["native"].newURL = value;
          }, nil) && 'new=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc);
            })}};

        self.$alias_native("old", "oldURL");

        return self.$alias_native("new", "newURL");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/progress"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Progress(){};
        var self = $Progress = $klass($base, $super, 'Progress', $Progress);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Progress");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$computable='] = function(value) {
            var self = this;

            return self["native"].computableLength = value;
          };

          def['$loaded='] = function(value) {
            var self = this;

            return self["native"].loaded = value;
          };

          return (def['$total='] = function(value) {
            var self = this;

            return self["native"].total = value;
          }, nil) && 'total=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            })}};

        self.$alias_native("computable?", "computableLength");

        self.$alias_native("loaded");

        return self.$alias_native("total");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/page_transition"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PageTransition(){};
        var self = $PageTransition = $klass($base, $super, 'PageTransition', $PageTransition);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PageTransition");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (def['$persisted='] = function(value) {
            var self = this;

            return self["native"].persisted = value;
          }, nil) && 'persisted='
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.PageTransition")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc);
            })}};

        return self.$alias_native("persisted?", "persisted");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/pop_state"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PopState(){};
        var self = $PopState = $klass($base, $super, 'PopState', $PopState);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PopState");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (def['$state='] = function(value) {
            var self = this;

            return self["native"].state = value;
          }, nil) && 'state='
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            })}};

        return self.$alias_native("state");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/storage"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Storage(){};
        var self = $Storage = $klass($base, $super, 'Storage', $Storage);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Storage");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$key='] = function(value) {
            var self = this;

            return self["native"].key = value;
          };

          def['$new='] = function(value) {
            var self = this;

            return self["native"].newValue = value;
          };

          def['$old='] = function(value) {
            var self = this;

            return self["native"].oldValue = value;
          };

          def['$area='] = function(value) {
            var self = this;

            return self["native"].storageArea = value;
          };

          return (def['$url='] = function(value) {
            var self = this;

            return self["native"].url = value;
          }, nil) && 'url=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new StorageEvent(name, desc);
            })}};

        self.$alias_native("key");

        self.$alias_native("new", "newValue");

        self.$alias_native("old", "oldValue");

        self.$alias_native("area", "storageArea");

        return self.$alias_native("url");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/touch"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Touch(){};
        var self = $Touch = $klass($base, $super, 'Touch', $Touch);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Touch");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$alt!'] = function() {
            var self = this;

            return self["native"].altKey = true;
          };

          def['$ctrl!'] = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          };

          def['$meta!'] = function() {
            var self = this;

            return self["native"].metaKey = true;
          };

          return (def['$shift!'] = function() {
            var self = this;

            return self["native"].shiftKey = true;
          }, nil) && 'shift!';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new TouchEvent(name, desc);
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        def['$cancel?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel");
        };

        def['$end?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend");
        };

        def['$leave?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave");
        };

        def['$move?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove");
        };

        return (def['$start?'] = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart");
        }, nil) && 'start?';
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/sensor"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Sensor(){};
        var self = $Sensor = $klass($base, $super, 'Sensor', $Sensor);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Sensor");
        });

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new SensorEvent(name, desc);
            }), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["ostruct"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$[]=', '$to_sym', '$[]', '$end_with?', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$class', '$join', '$map', '$inspect']);
  return (function($base, $super) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.table = nil;
    def.$initialize = function(hash) {
      var $a, $b, TMP_1, self = this;

      if (hash == null) {
        hash = nil
      }
      self.table = $hash2([], {});
      if (hash !== false && hash !== nil) {
        return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.table['$[]='](key.$to_sym(), value)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        } else {
        return nil
      };
    };

    def['$[]'] = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym());
    };

    def['$[]='] = function(name, value) {
      var self = this;

      return self.table['$[]='](name.$to_sym(), value);
    };

    def.$method_missing = function(name, args) {
      var $a, self = this;

      args = $slice.call(arguments, 1);
      if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.table['$[]='](name['$[]']($range(0, -2, false)).$to_sym(), args['$[]'](0))
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    };

    def.$each_pair = TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return ($a = ($b = self.table).$each_pair, $a.$$p = (TMP_3 = function(pair){var self = TMP_3.$$s || this, $a;
if (pair == null) pair = nil;
      return $a = Opal.yield1($yield, pair), $a === $breaker ? $a : $a}, TMP_3.$$s = self, TMP_3), $a).call($b);
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    };

    def['$==='] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    };

    def.$to_h = function() {
      var self = this;

      return self.table.$dup();
    };

    def.$to_n = function() {
      var self = this;

      return self.table.$to_n();
    };

    def.$hash = function() {
      var self = this;

      return self.table.$hash();
    };

    return (def.$inspect = function() {
      var $a, $b, TMP_4, self = this;

      return "#<" + (self.$class()) + ": " + (($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (self['$[]'](name).$inspect())}, TMP_4.$$s = self, TMP_4), $a).call($b).$join(" ")) + ">";
    }, nil) && 'inspect';
  })(self, null)
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/custom"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  self.$require("ostruct");
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Custom(){};
        var self = $Custom = $klass($base, $super, 'Custom', $Custom);

        var def = self.$$proto, $scope = self.$$scope, $a, TMP_1, TMP_2;

        def.detail = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Custom");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (def.$method_missing = function(name, value) {
            var $a, self = this;

            if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value;
              } else {
              return nil
            };
          }, nil) && 'method_missing'
        })(self, $scope.get('Definition'));

        if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            return new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc });
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          })
          } else {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          })
        };

        def.$initialize = TMP_1 = function(event, callback) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          if (callback == null) {
            callback = nil
          }
          TMP_1.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [event, callback]);
          return self.detail = $scope.get('Hash').$new(event.detail);
        };

        return (def.$method_missing = TMP_2 = function(id) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

          TMP_2.$$p = null;
          if ((($a = self.detail['$has_key?'](id)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.detail['$[]'](id)};
          return Opal.find_super_dispatcher(self, 'method_missing', TMP_2, $iter).apply(self, $zuper);
        }, nil) && 'method_missing';
      })(self, $scope.get('Event'))
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["native"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$to_a', '$to_ary', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$==', '$instance_variable_set', '$members', '$each_with_index', '$each_pair', '$name', '$native_module']);
  (function($base) {
    var self = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$is_a?', function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    });

    Opal.defs(self, '$try_convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return nil;
      }
    ;
    });

    Opal.defs(self, '$convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    });

    Opal.defs(self, '$call', TMP_1 = function(obj, key, args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      TMP_1.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, length = args.length; i < length; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    });

    (function($base) {
      var self = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$alias_native', function(new$, old, options) {
        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, as = nil;

        if (old == null) {
          old = new$
        }
        if (options == null) {
          options = $hash2([], {})
        }
        if ((($a = old['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_2.$$s = self, TMP_2), $a).call($b, new$)
        } else if ((($a = as = options['$[]']("as")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this, block, $a, $b, $c;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_3.$$p || nil, TMP_3.$$p = null;
          if ((($a = value = ($b = ($c = $scope.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], old].concat(args))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, block, $a, $b;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_4.$$p || nil, TMP_4.$$p = null;
          return ($a = ($b = $scope.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], old].concat(args))}, TMP_4.$$s = self, TMP_4), $a).call($d, new$)
        };
      });

      Opal.defn(self, '$native_reader', function(names) {
        var $a, $b, TMP_5, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_6.$$s = self, TMP_6), $a).call($b, name)}, TMP_5.$$s = self, TMP_5), $a).call($b);
      });

      Opal.defn(self, '$native_writer', function(names) {
        var $a, $b, TMP_7, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_8.$$s = self, TMP_8), $a).call($b, "" + (name) + "=")}, TMP_7.$$s = self, TMP_7), $a).call($b);
      });

      Opal.defn(self, '$native_accessor', function(names) {
        var $a, $b, self = this;

        names = $slice.call(arguments, 0);
        ($a = self).$native_reader.apply($a, [].concat(names));
        return ($b = self).$native_writer.apply($b, [].concat(names));
      });
    })(self);

    Opal.defs(self, '$included', function(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    });

    Opal.defn(self, '$initialize', function(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    });

    Opal.defn(self, '$to_n', function() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    });
  })(self);
  (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$native?', function(value) {
      var self = this;

      return value == null || !value.$$class;
    });

    Opal.defn(self, '$Native', function(obj) {
      var $a, self = this;

      if ((($a = obj == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
        } else {
        return obj
      };
    });

    Opal.defn(self, '$Array', TMP_9 = function(object, args) {
      var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_9.$$p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (self['$native?'](object)) {
        return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).apply($b, [object].concat(args)).$to_a();
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    });
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    });

    Opal.defn(self, '$has_key?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$key?', def['$has_key?']);

    Opal.defn(self, '$include?', def['$has_key?']);

    Opal.defn(self, '$member?', def['$has_key?']);

    Opal.defn(self, '$each', TMP_10 = function(args) {
      var $a, self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_10.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          ((($a = Opal.yieldX($yield, [key, self["native"][key]])) === $breaker) ? $breaker.$v : $a)
        }
      ;
        return self;
        } else {
        return ($a = self).$method_missing.apply($a, ["each"].concat(args))
      };
    });

    Opal.defn(self, '$[]', function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    });

    Opal.defn(self, '$[]=', function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    });

    Opal.defn(self, '$merge!', function(other) {
      var self = this;

      
      var other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    });

    Opal.defn(self, '$respond_to?', function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    });

    Opal.defn(self, '$respond_to_missing?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$method_missing', TMP_11 = function(mid, args) {
      var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_11.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, mid.$length()['$-'](1)), args['$[]'](0));
      }
      else {
        return ($a = ($b = Opal.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], mid].concat(args));
      }
    ;
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    });

    Opal.defn(self, '$kind_of?', def['$is_a?']);

    Opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      return self.$$class === klass;
    });

    Opal.defn(self, '$class', function() {
      var self = this;

      return self.$$class;
    });

    Opal.defn(self, '$to_a', TMP_12 = function(options) {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_12.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    });

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    def.$initialize = TMP_13 = function(native$, options) {
      var $a, self = this, $iter = TMP_13.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_13.$$p = null;
      Opal.find_super_dispatcher(self, 'initialize', TMP_13, null).apply(self, [native$]);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    };

    def.$each = TMP_14 = function() {
      var self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        var value = Opal.yield1(block, self['$[]'](i));

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    };

    def['$[]'] = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil) {
        if ((($a = self.block) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    };

    def['$[]='] = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    };

    def.$last = function(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil
      }
      if (count !== false && count !== nil) {
        index = self.$length()['$-'](1);
        result = [];
        while (index['$>='](0)) {
        result['$<<'](self['$[]'](index));
        index = index['$-'](1);};
        return result;
        } else {
        return self['$[]'](self.$length()['$-'](1))
      };
    };

    def.$length = function() {
      var self = this;

      return self["native"][self.length];
    };

    Opal.defn(self, '$to_ary', def.$to_a);

    return (def.$inspect = function() {
      var self = this;

      return self.$to_a().$inspect();
    }, nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope;

    def.matches = nil;
    return (def.$to_n = function() {
      var self = this;

      return self.matches;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope;

    def.$initialize = function(args) {
      var $a, $b, TMP_15, $c, TMP_16, self = this, object = nil;

      args = $slice.call(arguments, 0);
      if ((($a = (($b = args.$length()['$=='](1)) ? self['$native?'](args['$[]'](0)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        object = args['$[]'](0);
        return ($a = ($b = self.$members()).$each, $a.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this;
if (name == null) name = nil;
        return self.$instance_variable_set("@" + (name), self.$Native(object[name]))}, TMP_15.$$s = self, TMP_15), $a).call($b);
        } else {
        return ($a = ($c = self.$members()).$each_with_index, $a.$$p = (TMP_16 = function(name, index){var self = TMP_16.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
        return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_16.$$s = self, TMP_16), $a).call($c)
      };
    };

    return (def.$to_n = function() {
      var $a, $b, TMP_17, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_17 = function(name, value){var self = TMP_17.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = value.$to_n();}, TMP_17.$$s = self, TMP_17), $a).call($b);
      return result;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        if ((obj)['$respond_to?']("to_n")) {
          result.push((obj).$to_n());
        }
        else {
          result.push(obj);
        }
      }

      return result;
    ;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return null;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_18;

    def.$initialize = TMP_18 = function(defaults) {
      var self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      
      if (defaults != null) {
        if (defaults.constructor === Object) {
          var _map = self.map,
              smap = self.smap,
              keys = self.keys,
              map, khash, value;

          for (var key in defaults) {
            value = defaults[key];

            if (key.$$is_string) {
              map = smap;
              khash = key;
            } else {
              map = _map;
              khash = key.$hash();
            }

            if (value && value.constructor === Object) {
              map[khash] = $scope.get('Hash').$new(value);
            }
            else {
              map[khash] = self.$Native(value);
            }

            keys.push(key);
          }
        }
        else {
          self.none = defaults;
        }
      }
      else if (block !== nil) {
        self.proc = block;
      }

      return self;
    
    };

    return (def.$to_n = function() {
      var self = this;

      
      var result = {},
          keys   = self.keys,
          _map   = self.map,
          smap   = self.smap,
          map, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key   = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        value = map[khash];

        if ((value)['$respond_to?']("to_n")) {
          result[key] = (value).$to_n();
        }
        else {
          result[key] = value;
        }
      }

      return result;
    ;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$native_module = function() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, nil) && 'native_module'
  })(self, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope;

    def.$native_alias = function(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError'), "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'");
      }
      self.$$proto[new_jsid] = aliased;
    ;
    };

    return (def.$native_class = function() {
      var self = this;

      self.$native_module();
      self.new = self.$new;
    }, nil) && 'native_class';
  })(self, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.7.2 */
Opal.modules["buffer/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]', '$name_for', '$include', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def["native"] = nil;
      Opal.defs(self, '$for', function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + ($scope.get('Buffer').$name_for(bits, type)) + "Array");
      });

      self.$include($scope.get('Enumerable'));

      self.$attr_reader("buffer", "type");

      def.$initialize = TMP_1 = function(buffer, bits, type) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (bits == null) {
          bits = nil
        }
        if (type == null) {
          type = nil
        }
        TMP_1.$$p = null;
        if ($scope.get('Native')['$=='](buffer)) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [buffer])
          } else {
          
        var klass = $scope.get('Array').$for(bits, type);

        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new klass(buffer.$to_n())])
      ;
        };
        self.buffer = buffer;
        return self.type = type;
      };

      def.$bits = function() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8;
      };

      def['$[]'] = function(index, offset) {
        var self = this;

        if (offset == null) {
          offset = nil
        }
        if (offset !== false && offset !== nil) {
          return self["native"].subarray(index, offset);
          } else {
          return self["native"][index];
        };
      };

      def['$[]='] = function(index, value) {
        var self = this;

        return self["native"][index] = value;
      };

      def.$bytesize = function() {
        var self = this;

        return self["native"].byteLength;
      };

      def.$each = TMP_2 = function() {
        var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        TMP_2.$$p = null;
        if (($yield !== nil)) {
          } else {
          return self.$enum_for("each")
        };
        
      for (var i = 0, length = self["native"].length; i < length; i++) {
        ((($a = Opal.yield1($yield, self["native"][i])) === $breaker) ? $breaker.$v : $a)
      }
    ;
        return self;
      };

      def.$length = function() {
        var self = this;

        return self["native"].length;
      };

      def['$merge!'] = function(other, offset) {
        var self = this;

        return self["native"].set(other.$to_n(), offset);
      };

      return Opal.defn(self, '$size', def.$length);
    })(self, $scope.get('Native'))
  })(self, $scope.get('Native'))
};

/* Generated by Opal 0.7.2 */
Opal.modules["buffer/view"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defs(self, '$supported?', function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']();
      });

      self.$attr_reader("buffer", "offset");

      def.$initialize = TMP_1 = function(buffer, offset, length) {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (offset == null) {
          offset = nil
        }
        if (length == null) {
          length = nil
        }
        TMP_1.$$p = null;
        if ((($a = self['$native?'](buffer)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [buffer])
        } else if ((($a = (($b = offset !== false && offset !== nil) ? length : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n())])
        } else if (offset !== false && offset !== nil) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new DataView(buffer.$to_n(), offset.$to_n())])
          } else {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new DataView(buffer.$to_n())])
        };
        self.buffer = buffer;
        return self.offset = offset;
      };

      def.$length = function() {
        var self = this;

        return self["native"].byteLength;
      };

      Opal.defn(self, '$size', def.$length);

      def.$get = function(offset, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8
        }
        if (type == null) {
          type = "unsigned"
        }
        if (little == null) {
          little = false
        }
        return self["native"]["get" + $scope.get('Buffer').$name_for(bits, type)](offset, little);
      };

      Opal.defn(self, '$[]', def.$get);

      def.$set = function(offset, value, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8
        }
        if (type == null) {
          type = "unsigned"
        }
        if (little == null) {
          little = false
        }
        return self["native"]["set" + $scope.get('Buffer').$name_for(bits, type)](offset, value, little);
      };

      Opal.defn(self, '$[]=', def.$set);

      def.$get_int8 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getInt8(offset, little);
      };

      def.$set_int8 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setInt8(offset, value, little);
      };

      def.$get_uint8 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getUint8(offset, little);
      };

      def.$set_uint8 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setUint8(offset, value, little);
      };

      def.$get_int16 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getInt16(offset, little);
      };

      def.$set_int16 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setInt16(offset, value, little);
      };

      def.$get_uint16 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getUint16(offset, little);
      };

      def.$set_uint16 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setUint16(offset, value, little);
      };

      def.$get_int32 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getInt32(offset, little);
      };

      def.$set_int32 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setInt32(offset, value, little);
      };

      def.$get_uint32 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getUint32(offset, little);
      };

      def.$set_uint32 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setUint32(offset, value, little);
      };

      def.$get_float32 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getFloat32(offset, little);
      };

      def.$set_float32 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setFloat32(offset, value, little);
      };

      def.$get_float64 = function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getFloat64(offset, little);
      };

      return (def.$set_float64 = function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setFloat64(offset, value, little);
      }, nil) && 'set_float64';
    })(self, null)
  })(self, null)
};

/* Generated by Opal 0.7.2 */
Opal.modules["buffer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def["native"] = nil;
    self.$include($scope.get('Native'));

    Opal.defs(self, '$supported?', function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']();
    });

    Opal.defs(self, '$name_for', function(bits, type) {
      var self = this, $case = nil;

      return "" + ((function() {$case = type;if ("unsigned"['$===']($case)) {return "Uint"}else if ("signed"['$===']($case)) {return "Int"}else if ("float"['$===']($case)) {return "Float"}else { return nil }})()) + (bits);
    });

    def.$initialize = TMP_1 = function(size, bits) {
      var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      if (bits == null) {
        bits = 8
      }
      TMP_1.$$p = null;
      if ((($a = self['$native?'](size)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [size])
        } else {
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new ArrayBuffer(size * (bits / 8))])
      };
    };

    def.$length = function() {
      var self = this;

      return self["native"].byteLength;
    };

    Opal.defn(self, '$size', def.$length);

    def.$to_a = function(bits, type) {
      var self = this;

      if (bits == null) {
        bits = 8
      }
      if (type == null) {
        type = "unsigned"
      }
      return $scope.get('Array').$new(self, bits, type);
    };

    return (def.$view = function(offset, length) {
      var self = this;

      if (offset == null) {
        offset = nil
      }
      if (length == null) {
        length = nil
      }
      return $scope.get('View').$new(self, offset, length);
    }, nil) && 'view';
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/message"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  self.$require("buffer");
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Message(){};
        var self = $Message = $klass($base, $super, 'Message', $Message);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Message");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$data='] = function(value) {
            var self = this;

            return self["native"].data = value;
          };

          def['$origin='] = function(value) {
            var self = this;

            return self["native"].origin = value;
          };

          return (def['$source='] = function(value) {
            var self = this;

            return self["native"].source = $scope.get('Native').$convert(value);
          }, nil) && 'source=';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new MessageEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            })}};

        def.$data = function() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return $scope.get('Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return $scope.get('Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    ;
        };

        self.$alias_native("origin");

        return (def.$source = function() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return $scope.get('Window').$new(source);
      }
      else {
        return nil;
      }
    ;
        }, nil) && 'source';
      })(self, $scope.get('Event'))
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["browser/event/close"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Close(){};
        var self = $Close = $klass($base, $super, 'Close', $Close);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Close");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          def['$code='] = function(value) {
            var self = this;

            return self["native"].code = value;
          };

          def['$reason='] = function(value) {
            var self = this;

            return self["native"].reason = value;
          };

          def['$clean!'] = function(value) {
            var self = this;

            return self["native"].wasClean = true;
          };

          return (def['$not_clean!'] = function(value) {
            var self = this;

            return self["native"].wasClean = false;
          }, nil) && 'not_clean!';
        })(self, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new CloseEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            })}};

        self.$alias_native("code");

        self.$alias_native("reason");

        return self.$alias_native("clean?", "wasClean");
      })(self, $scope.get('Event'))
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$to_proc', '$const_get', '$arguments=', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3;

      def["native"] = def.on = def.callback = nil;
      Opal.defs(self, '$aliases', function() {
        var $a, self = this;
        if (self.aliases == null) self.aliases = nil;

        return ((($a = self.aliases) !== false && $a !== nil) ? $a : self.aliases = $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"}));
      });

      Opal.defs(self, '$name_for', function(name) {
        var $a, self = this;

        return (((($a = self.$aliases()['$[]'](name)) !== false && $a !== nil) ? $a : name)).$gsub(":", "");
      });

      Opal.defs(self, '$class_for', function(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return $scope.get('Animation')}else if ("audioprocess"['$===']($case)) {return $scope.get('AudioProcessing')}else if ("beforeunload"['$===']($case)) {return $scope.get('BeforeUnload')}else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return $scope.get('Composition')}else if ("copy"['$===']($case) || "cut"['$===']($case)) {return $scope.get('Clipboard')}else if ("devicelight"['$===']($case)) {return $scope.get('DeviceLight')}else if ("devicemotion"['$===']($case)) {return $scope.get('DeviceMotion')}else if ("deviceorientation"['$===']($case)) {return $scope.get('DeviceOrientation')}else if ("deviceproximity"['$===']($case)) {return $scope.get('DeviceProximity')}else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return $scope.get('Drag')}else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return $scope.get('Gamepad')}else if ("hashchange"['$===']($case)) {return $scope.get('HashChange')}else if ("load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return $scope.get('Progress')}else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return $scope.get('PageTransition')}else if ("popstate"['$===']($case)) {return $scope.get('PopState')}else if ("storage"['$===']($case)) {return $scope.get('Storage')}else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return $scope.get('Touch')}else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return $scope.get('Sensor')}else if ("message"['$===']($case)) {return $scope.get('Message')}else if ("close"['$===']($case)) {return $scope.get('Close')}else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return $scope.get('Mouse')}else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return $scope.get('Keyboard')}else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return $scope.get('Focus')}else if ("wheel"['$===']($case)) {return $scope.get('Wheel')}else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return $scope.get('Event')}else {return $scope.get('Custom')}})();
      });

      Opal.defs(self, '$supported?', function() {
        var self = this;

        return true;
      });

      Opal.defs(self, '$create', TMP_1 = function(name, args) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, klass = nil, event = nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, ($a = ($b = klass.$const_get("Definition")).$new, $a.$$p = block.$to_proc(), $a).call($b)));
        (($a = [args]), $c = event, $c['$arguments='].apply($c, $a), $a[$a.length-1]);
        return event;
      });

      if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return new Event(name, desc);
        })
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', function(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        })
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n();
        })
        } else {
        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n();
        })
      };

      Opal.defs(self, '$new', TMP_2 = function(value, callback) {var $zuper = $slice.call(arguments, 0);
        var self = this, $iter = TMP_2.$$p, $yield = $iter || nil, klass = nil;

        if (callback == null) {
          callback = nil
        }
        TMP_2.$$p = null;
        if (self['$==']($scope.get('Event'))) {
          } else {
          return Opal.find_super_dispatcher(self, 'new', TMP_2, $iter, $Event).apply(self, $zuper)
        };
        klass = self.$class_for((function() {if (callback !== false && callback !== nil) {
          return callback.$name()
          } else {
          return value.type;
        }; return nil; })());
        if (klass['$==']($scope.get('Event'))) {
          return Opal.find_super_dispatcher(self, 'new', TMP_2, $iter, $Event).apply(self, $zuper)
          } else {
          return klass.$new(value, callback)
        };
      });

      self.$attr_reader("callback");

      self.$attr_writer("on");

      def.$initialize = TMP_3 = function(event, callback) {
        var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

        if (callback == null) {
          callback = nil
        }
        TMP_3.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_3, null).apply(self, [event]);
        return self.callback = callback;
      };

      def.$name = function() {
        var self = this;

        return self["native"].type;
      };

      def.$on = function() {
        var $a, self = this;

        return ((($a = self.on) !== false && $a !== nil) ? $a : $scope.get('Target').$convert(self["native"].currentTarget));
      };

      def.$target = function() {
        var self = this;

        return $scope.get('Target').$convert(self["native"].srcElement || self["native"].target);
      };

      def.$arguments = function() {
        var self = this;

        return self["native"].arguments || [];
      };

      def['$arguments='] = function(args) {
        var self = this;

        return self["native"].arguments = args;
      };

      self.$alias_native("bubbles?", "bubbles");

      self.$alias_native("cancelable?", "cancelable");

      self.$alias_native("data");

      self.$alias_native("phase", "eventPhase");

      self.$alias_native("at", "timeStamp");

      def.$off = function() {
        var $a, self = this;

        if ((($a = self.callback) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.callback.$off()
          } else {
          return nil
        };
      };

      def['$stopped?'] = function() {
        var self = this;

        return !!self["native"].stopped;
      };

      def.$stop = function() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].stopPropagation) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["native"].stopPropagation();};
        return self["native"].stopped = true;
      };

      def.$prevent = function() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].preventDefault) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["native"].preventDefault();};
        return self["native"].prevented = true;
      };

      def['$prevented?'] = function() {
        var self = this;

        return !!self["native"].prevented;
      };

      return (def['$stop!'] = function() {
        var self = this;

        self.$prevent();
        return self.$stop();
      }, nil) && 'stop!';
    })(self, null)
  })(self);
})(Opal);
