/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$target', '$is_a?', '$new', '$native?', '$to_s', '$to_n', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$alias_native', '$split', '$state']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Socket(){};
      var self = $Socket = $klass($base, $super, 'Socket', $Socket);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2;

      def["native"] = nil;
      Opal.defs(self, '$supported?', function() {
        var self = this;

        return $scope.get('Browser')['$supports?']("WebSocket");
      });

      self.$include($scope.get('Native'));

      self.$include((($scope.get('IO')).$$scope.get('Writable')));

      self.$include((($scope.get('Event')).$$scope.get('Target')));

      ($a = ($b = self).$target, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this, $a;
if (value == null) value = nil;
      if ((($a = $scope.get('Native')['$is_a?'](value, window.WebSocket)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Socket').$new(value)
          } else {
          return nil
        }}, TMP_1.$$s = self, TMP_1), $a).call($b);

      def.$initialize = TMP_2 = function(url, protocol) {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        if (protocol == null) {
          protocol = nil
        }
        TMP_2.$$p = null;
        if ((($a = self['$native?'](url)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [url])
        } else if (protocol !== false && protocol !== nil) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [new window.WebSocket(url.$to_s(), protocol.$to_n())])
          } else {
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [new window.WebSocket(url.$to_s())])
        };
        if (block !== false && block !== nil) {
          if (block.$arity()['$=='](0)) {
            return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
            } else {
            return block.$call(self)
          }
          } else {
          return nil
        };
      };

      self.$alias_native("protocol");

      self.$alias_native("url");

      self.$alias_native("buffered", "bufferedAmount");

      def.$type = function() {
        var self = this;


      switch (self["native"].binaryType) {
        case "blob":
          return "blob";

        case "arraybuffer":
          return "buffer";

        default:
          return "string";
      }
    ;
      };

      def.$state = function() {
        var self = this;


      switch (self["native"].readyState) {
        case window.WebSocket.CONNECTING:
          return "connecting";

        case window.WebSocket.OPEN:
          return "open";

        case window.WebSocket.CLOSING:
          return "closing";

        case window.WebSocket.CLOSED:
          return "closed";
      }
    ;
      };

      def.$extensions = function() {
        var self = this;

        return (self["native"].extensions).$split(/\s*,\s*/);
      };

      def['$alive?'] = function() {
        var self = this;

        return self.$state()['$==']("open");
      };

      def.$write = function(data) {
        var self = this;

        return self["native"].send(data.$to_n());
      };

      Opal.defn(self, '$<<', def.$write);

      Opal.defn(self, '$send', def.$write);

      return (def.$close = function(code, reason) {
        var self = this;

        if (code == null) {
          code = nil
        }
        if (reason == null) {
          reason = nil
        }
        return self["native"].close(code.$to_n(), reason.$to_n());
      }, nil) && 'close';
    })(self, null)
  })(self)
})(Opal);
